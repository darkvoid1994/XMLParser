package pack1;


import org.w3c.dom.*;
import org.xml.sax.SAXException;

import javax.xml.parsers.*;
import javax.xml.transform.Transformer;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.*;
import javax.xml.*;

import java.io.File;
import java.io.IOException;


public class XmlDemo {
	
	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException
	   {
//	      Get Document Builder
//		Get Document Builder
	      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	      DocumentBuilder builder = factory.newDocumentBuilder();
	       
	      //Build Document
	      Document document = builder.parse(new File("D:/test.xml"));
	       
	      //Normalize the XML Structure; It's just too important !!
	      document.getDocumentElement().normalize();
	       
	      //Here comes the root node
	      Element root = document.getDocumentElement();
	      System.out.println(root.getNodeName());
	       
	      //Get all employees
	      NodeList nList = document.getElementsByTagName("company");
	      System.out.println(nList.getLength());

	      System.out.println("============================");
	       
	      visitChildNodes(nList);
	   }
	 
	   //This function is called recursively
	   private static void visitChildNodes(NodeList nList)
	   
	   {
		   Node tempNode = null;
		   
//		   System.out.println("The Number of child nodes are " + (nList.getLength()) );

		   if(!(nList.getLength() == 1)) {
//			   System.out.println("The Number of child nodes are " + (nList.getLength()) );
			   
//			   for (int temp = 0; temp < nList.getLength(); temp++)
//			      {
//			         Node node = nList.item(temp);
//			         if (node.getNodeType() == Node.ELEMENT_NODE)
//			         {
//			  		   System.out.println();
//			            System.out.println("Node Name = " + node.getNodeName() + ";");
//			         }
//			      }   
		   }

	      for (int temp = 0; temp < nList.getLength(); temp++)
	      {
	         Node node = nList.item(temp);
	         if (node.getNodeType() == Node.ELEMENT_NODE)
	         {
	  		   System.out.println();
	            System.out.println("Node Name = " + node.getNodeName() + ";");
	            
//	            if (node.hasAttributes()) {
//		               // get attributes names and values
//		               NamedNodeMap nodeMap = node.getAttributes();
//		               for (int i = 0; i < nodeMap.getLength(); i++)
//		               {
//		                   tempNode = nodeMap.item(i);
//		                   System.out.println("                     Attr  : " + tempNode.getNodeName()+ "; Value = " + tempNode.getNodeValue());
//		               }
//		               
//		           }else {
////		        	   System.out.println("No Attributes");
//		           }
	            
	            if (node.hasChildNodes()) {
	            	   NodeList nodeList = node.getChildNodes();
	            	   
	            	   if((node.getChildNodes().getLength()/2)>0) {
		            	   System.out.println("This node has child nodes "+ (node.getChildNodes().getLength()/2));
	            	   System.out.println("Child nodes of : [ " + node.getNodeName() + " ] =>");
	            	   for(int k = 0;k < nodeList.getLength(); k++) {
	            		   
	            		   Node n = nodeList.item(k);
	            		   if (n.getNodeType() == Node.ELEMENT_NODE)
	          	         {
	            			   
	            			   
	            			   if((k<(nodeList.getLength()))) {
		            			   System.out.println("                           [ " + n.getNodeName() + " ] =>" );
		            			   if (n.hasAttributes()) {
//		        		               // get attributes names and values
		        		               NamedNodeMap nodeMap = n.getAttributes();
		        		               for (int i = 0; i < nodeMap.getLength(); i++)
		        		               {
		        		                   tempNode = nodeMap.item(i);
		        		                   System.out.println("                                  Attr  : " + tempNode.getNodeName()+ "; Value = " + tempNode.getNodeValue() + " ]");
		        		               }
		        		               
		        		           }else {
//		        		        	   System.out.println("No Attributes");
		        		           }
		            			   
		            			   

	            			   }else if((k==(nodeList.getLength()))) {
		            			   System.out.println("                     [ " + n.getNodeName() + " ]");

	            			   }
	            			   
	            		   
	            	   }
	            	   }
	            	   
	            	   System.out.println("                  ]");
	            	   }
	                  visitChildNodes(node.getChildNodes());
	                  
	                 
	               }
	            
        }
	      }
	   }
	
}


